AI:
	Use Oscar Library predicates
	init_things to test conditions

AI To do:
1. A* in Prolog
	- change backtracking search into agenda-based
	- where solve_task_bt use input variable Current change to agenda (list)
	- format of Current is [c(Cost,Pos)|RPath] where Pos is position and RPath is reverse path, Cost is cost (number of steps to reach position)
	- Agenda needs to hold list of such structures, children to be added to agenda can be generated by appropriate setof/3 call involving search/4
	- A* search Cost would be the F-value of a node, where F=G+H, G is distance travelled, H is estimated by Manhattan distance to goal
	- Putting Cost at front of [c(Cost,Pos)|RPath] structure ensures that setof/3 generates children in order of increasing F-value, simplifies adding children to agenda
	- Maintain both F and G values for each node on the agenda, which would lead to structure [c(F,G,Pos)|RPath]
	- Tasks of form find(o(1)) don't know location of the goal so can't estimate H, in this case search strategy should be breath-first search to find optimal path, achieved by setting H=0 for all children of current position

	A* Algorithm:
	A* is an informed search algorithm that extends Dijkstras by heuristics, solves by searching among all possible paths to solution for one of smallest cost
	First considers ones that appear to lead most quickly to a solution based on weighted graphs: starting from specific node it constructs a tree of paths from that node, expanding paths one step at a time, until one of its paths ends at the predetermined goal node
	At each iteration A* needs to determine which of its partial paths to expand into one or more longer paths. It does so based on estimate of cost (total weight) still to go to the goal node. 
		A* selects path that minimises f(n) = g(n) + h(n).
	Where n is last node on path, g(n) is cost of path from start node to n, and h(n) is a heuristic that estimates the cost of the cheapest path from n to the goal
	The heuristic is problem-specific, for the algorithm to find the actual shortest path, the heuristic function must be admissable(never overestimates actual cost).
	Typical implementations use priority queue to perform repeated selection of minimum (estimated) cost nodes to expand. This priority queue is known as the open set or fringe, at each step of the algorithm the node with lowest f(x) value is removed from queue, the f and g value of neighbours updated, and neighbours added to queue. The algorithm continues until goal node has a lower f value than any node in queue, or if queue is empty. The f value is then length of shortest path. Since h at goal is zero in an admissible heuristic.
	To find actual path revise so each node keep track of its predecessor, after running the ending node will point to its predecessor back to start
2. 